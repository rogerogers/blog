[{"body":"","link":"https://blog.rogerogers.com/posts/dev/","section":"posts","tags":null,"title":"dev"},{"body":"","link":"https://blog.rogerogers.com/","section":"","tags":null,"title":""},{"body":"","link":"https://blog.rogerogers.com/tags/alertmanager/","section":"tags","tags":null,"title":"alertmanager"},{"body":"","link":"https://blog.rogerogers.com/tags/ansible/","section":"tags","tags":null,"title":"ansible"},{"body":"Install 1sudo apt install ansible 2#or use pip3 3pip3 install --user ansible 4ansible --version 5# ansible [core 2.12.4] 6# config file = None 7# configured module search path = [\u0026#39;/home/rogers/.ansible/plugins/modules\u0026#39;, \u0026#39;/usr/share/ansible/plugins/modules\u0026#39;] 8# ansible python module location = /usr/lib/python3/dist-packages/ansible 9# ansible collection location = /home/rogers/.ansible/collections:/usr/share/ansible/collections 10# executable location = /bin/ansible 11# python version = 3.10.4 (main, Mar 24 2022, 13:07:27) [GCC 11.2.0] 12# jinja version = 3.0.3 13# libyaml = True 14ssh-copy-id root@127.0.0.1 15#input your password define your inventory file\nhosts file\n1[localhost] 2127.0.0.1 1ansible -i hosts -m ping 2# 127.0.0.1 | SUCCESS =\u0026gt; { 3# \u0026#34;ansible_facts\u0026#34;: { 4# \u0026#34;discovered_interpreter_python\u0026#34;: \u0026#34;/usr/bin/python3.10\u0026#34; 5# }, 6# \u0026#34;changed\u0026#34;: false, 7# \u0026#34;ping\u0026#34;: \u0026#34;pong\u0026#34; 8# } 9ansible-doc ping 10#show module help ","link":"https://blog.rogerogers.com/posts/ops/use-ansible-manager-large-number-of-computer/","section":"posts","tags":["ops","ansible"],"title":"ansible beginner"},{"body":"source prometheus\ngrafana\ntelegraf\ninstall alertmanager 1wget https://github.com/prometheus/alertmanager/releases/download/v0.24.0/alertmanager-0.24.0.linux-amd64.tar.gz -O alertmanager.tar.gz 2tar -zxvf alertmanager.tar.gz 3cd alertmanager 4#you will see the alertmanager binary and a simple yaml config 5./alertmanager -h 6#show usage of alertmanager alertmanager.yml\n1route: 2 group_by: [\u0026#34;alertname\u0026#34;] 3 group_wait: 30s 4 group_interval: 5m 5 repeat_interval: 1h 6 receiver: \u0026#34;web.hook\u0026#34; 7receivers: 8 - name: \u0026#34;web.hook\u0026#34; 9 webhook_configs: 10 - url: \u0026#34;http://127.0.0.1:5001/\u0026#34; 11inhibit_rules: 12 - source_match: 13 severity: \u0026#34;critical\u0026#34; 14 target_match: 15 severity: \u0026#34;warning\u0026#34; 16 equal: [\u0026#34;alertname\u0026#34;, \u0026#34;dev\u0026#34;, \u0026#34;instance\u0026#34;] ./alertmanater start alertmanager server on port 9093\nnode exporter Prometheus collects variable metrics from variable kinds of exporter\n1wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz -O node_exporter.tar.gz 2tar -zxvf node_exporter.tar.gz 3cd node_exporter 4#you will see the node exporter binary 5./node_exporter 6#start node exporter on port 9100 prometheus 1wget https://github.com/prometheus/prometheus/releases/download/v2.36.2/prometheus-2.36.2.linux-amd64.tar.gz -O prometheus.tar.gz 2tar -zxvf prometheus 3cd prometheus 4#you will see the prometheus binary and a simple yaml config 5./prometheus -h 6#show usage of prometheus modify your prometheus.yml prometheus.yml\n1# my global config 2global: 3 scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. 4 evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. 5 # scrape_timeout is set to the global default (10s). 6# Alertmanager configuration 7alerting: 8 alertmanagers: 9 - static_configs: 10 - targets: 11 - localhost:9093 12# Load rules once and periodically evaluate them according to the global \u0026#39;evaluation_interval\u0026#39;. 13rule_files: 14 - \u0026#34;first_rules.yml\u0026#34; 15 # - \u0026#34;second_rules.yml\u0026#34; 16# A scrape configuration containing exactly one endpoint to scrape: 17# Here it\u0026#39;s Prometheus itself. 18scrape_configs: 19 # The job name is added as a label `job=\u0026lt;job_name\u0026gt;` to any timeseries scraped from this config. 20 - job_name: \u0026#34;prometheus\u0026#34; 21 # metrics_path defaults to \u0026#39;/metrics\u0026#39; 22 # scheme defaults to \u0026#39;http\u0026#39;. 23 static_configs: 24 - targets: [\u0026#34;localhost:9090\u0026#34;] 25 - job_name: \u0026#34;node\u0026#34; 26 static_configs: 27 - targets: [\u0026#34;localhost:9100\u0026#34;] first_rules.yml\n1groups: 2 - name: high_cpu 3 rules: 4 - alert: HostHighCpuLoad 5 expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode=\u0026#34;idle\u0026#34;}[2m])) * 100) \u0026gt; 1 6 for: 0m 7 labels: 8 severity: warning 9 annotations: 10 summary: Host high CPU load (instance {{ $labels.instance }}) 11 description: \u0026#34;CPU load is \u0026gt; 80%\\n VALUE = {{ $value }}\\n LABELS = {{ $labels }}\u0026#34; start a simple web server receives the webhook\n1from flask import Flask, request 2app = Flask(__name__) 3@app.route(\u0026#34;/\u0026#34;, methods=[\u0026#34;POST\u0026#34;]) 4def index(): 5 \u0026#34;\u0026#34;\u0026#34;docstring for index\u0026#34;\u0026#34;\u0026#34; 6 print(request.data, \u0026#34;data\u0026#34;) 7 print(request.args, \u0026#34;args\u0026#34;) 8 print(request.form, \u0026#34;form\u0026#34;) 9 return \u0026#34;ok\u0026#34; grafana 1sudo apt-get install -y adduser libfontconfig1 2wget https://dl.grafana.com/oss/release/grafana_9.0.0_amd64.deb 3sudo dpkg -i grafana_9.0.0_amd64.deb 4sudo systemctl enable --now grafana-server.service open you browser open grafana dashboard login use admin/admin and change your default password open setting datasource add prometheus datasource find node dashboard in grafana dashboard market import dashboard by id 1860 ","link":"https://blog.rogerogers.com/posts/ops/build-monitoring-system-base-on-prometheus-and-grafana/","section":"posts","tags":["monitoring","prometheus","grafana","alertmanager"],"title":"Build monitoring system base on prometheus and grafana"},{"body":"","link":"https://blog.rogerogers.com/tags/grafana/","section":"tags","tags":null,"title":"grafana"},{"body":"","link":"https://blog.rogerogers.com/tags/monitoring/","section":"tags","tags":null,"title":"monitoring"},{"body":"","link":"https://blog.rogerogers.com/tags/ops/","section":"tags","tags":null,"title":"ops"},{"body":"","link":"https://blog.rogerogers.com/posts/ops/","section":"posts","tags":["linux","k8s","kubernetes"],"title":"ops"},{"body":"","link":"https://blog.rogerogers.com/tags/prometheus/","section":"tags","tags":null,"title":"prometheus"},{"body":"","link":"https://blog.rogerogers.com/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"source anaconda download\ninstall Windows Install anaconda\nlinux \u0026amp;\u0026amp; mac 1#you should have python3 installed first 2#mac 3brew install python3 4#ubuntu 5apt install python3 # apt install python-is-python3 make python default version 3 6#fedora 7dnf install python3 # dnf install python-is-python3 8#using pip or pipenv, i prefer pipenv 9pipenv install pyqt5 You may want to install pyqt5-tools install the qt-designer pipenv install pyqt5-tools . This makes your dev easilier\nqt-designer Create your first ui You can design you ui by dragging the components, and change attributes of your components Press ctrl-r review your design\nConvert your ui file to python code 1pyuic5 -x main.ui -o ui/main_window.py Run your code 1import sys 2 3from main_window import Ui_MainWindow 4from PyQt5.QtWidgets import QMainWindow,QApplication 5 6class MainWindow(QMainWindow): 7def __init__(self, parent=None) -\u0026gt; None: 8 super().__init__(parent) 9 self.ui = Ui_MainWindow() 10 self.ui.setupUi(self) 11 12def main(): 13 app = QApplication(sys.argv) 14 window = MainWindow() 15 #you can set title 16 #window.setWindowTitle(\u0026#34;hello world\u0026#34;) 17 window.show() 18 #you can set icon 19 #app.setWindowIcon(\u0026#34;icon.icon\u0026#34;) 20 sys.exit(app.exec_()) 21 22if __name__ == \u0026#34;__main__\u0026#34;: 23 main() pyqt is so awesome\n","link":"https://blog.rogerogers.com/posts/dev/build-your-gui-use-pyqt5/","section":"posts","tags":["gui","python","pyqt5"],"title":"Build your gui use pyqt5"},{"body":"","link":"https://blog.rogerogers.com/tags/gui/","section":"tags","tags":null,"title":"gui"},{"body":"","link":"https://blog.rogerogers.com/tags/pyqt5/","section":"tags","tags":null,"title":"pyqt5"},{"body":"","link":"https://blog.rogerogers.com/tags/python/","section":"tags","tags":null,"title":"python"},{"body":"","link":"https://blog.rogerogers.com/tags/cni/","section":"tags","tags":null,"title":"cni"},{"body":"","link":"https://blog.rogerogers.com/tags/containerd/","section":"tags","tags":null,"title":"containerd"},{"body":"Install 1# ubuntu debain and other debain base distribution 2sudo apt install crictl -y 3# centos fedora and other red hat base distribution 4sudo yum install crictl -y You can download directly from github release page\nCreate /etc/crictl.yaml 1runtime-endpoint: \u0026#34;unix:///run/containerd/containerd.sock\u0026#34; 2image-endpoint: \u0026#34;\u0026#34; 3timeout: 0 4debug: false 5pull-image-on-create: false 6disable-pull-on-run: false Create pod config pod-config.yaml 1metadata: 2 attempt: 1 3 name: nginx-sandbox 4 namespace: default 5 uid: hdishd83djaidwnduwk28bcsb 6log_directory: /tmp 7linux: 8 namespaces: 9 options: {} Create container config container-config.yaml 1metadata: 2 name: nginx 3image: 4 image: docker.io/nginx:alpine 5log_path: nginx.log 1crictl run container-config.json pod-config.json 2crictl ps -a 3#CONTAINER IMAGE CREATED STATE NAME ATTEMPT POD ID POD 4#86f1c7a2aaffe nginx 23 minutes ago Running nginx 0 dd6d7d4ea70cd unknown 5crictl start 86f1c7a2aaffe 6crictl ps 7crictl pods 8#POD ID CREATED STATE NAME NAMESPACE ATTEMPT RUNTIME 9#dd6d7d4ea70cd About an hour ago Ready nginx default 1 (default) 10crictl port-forward dd6d7d4ea70cd 80:80 11curl localhost 12#welcome to nginx ","link":"https://blog.rogerogers.com/posts/ops/crictl-usage/","section":"posts","tags":["linux","k8s","kubernetes","cni","containerd"],"title":"Crictl usage"},{"body":"","link":"https://blog.rogerogers.com/tags/k8s/","section":"tags","tags":null,"title":"k8s"},{"body":"","link":"https://blog.rogerogers.com/tags/kubernetes/","section":"tags","tags":null,"title":"kubernetes"},{"body":"","link":"https://blog.rogerogers.com/tags/linux/","section":"tags","tags":null,"title":"linux"},{"body":"","link":"https://blog.rogerogers.com/tags/mac/","section":"tags","tags":null,"title":"mac"},{"body":"","link":"https://blog.rogerogers.com/tags/multipass/","section":"tags","tags":null,"title":"multipass"},{"body":"Docker desktop costs so much to run\nInstall multipass\n1brew install --cask multipass 2# specific resource, default cpu 1, default disk 5G 3multipass launch --name linux -d 10G -m 4 4# shortcut, alias make command easy 5alias m=multipass 6m launch linux Here i use homebrew. You can download directly multipass release\nNow you are in linux env, you login by ubuntu with sudo permission\n1sudo apt install docker docker.io 2#or you prefer containerd 3sudo apt install containerd crictl Use Docker command to manage your container You can mount your local path into instance\n1# pwd $HOME 2m mount -u 501:1000 $HOME/Public linux01:/tmp/public 3# pay attention on the policy of you mount dir ","link":"https://blog.rogerogers.com/posts/dev/run-docker-on-mac-use-multipass/","section":"posts","tags":["linux","mac","multipass"],"title":"Run Docker on mac use multipass"},{"body":"root needed\nubuntu 1apt-get update \u0026amp;\u0026amp; apt-get install -y apt-transport-https 2curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - 3cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/apt/sources.list.d/kubernetes.list 4deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main 5EOF 6apt-get update 7apt-get install -y kubelet kubeadm kubectl 8#close swap 9swapoff -a 10#remove swap mount 11vi /etc/fstab apt-key is deprecated in some new version linux distribution, like ubuntu, put gpg file inside /etc/apt/trusted.gpg.d\nfedora 1cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/yum.repos.d/kubernetes.repo 2[kubernetes] 3name=Kubernetes 4baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ 5enabled=1 6gpgcheck=1 7repo_gpgcheck=1 8gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg 9EOF 10#close selinux 11setenforce 0 12#disable selinux 13sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/g\u0026#39; 14#disable firewalld 15systemctl disable firewalld.service 16 17dnf update \u0026amp;\u0026amp; dnf install -y kubelet kubeadm kubectl 18systemctl enable --now kubelet 19#close swap 20swapoff -a 21#disable swap 22dnf remove zram-generator-defaults config 1apiVersion: kubeadm.k8s.io/v1beta3 2bootstrapTokens: 3 - groups: 4 - system:bootstrappers:kubeadm:default-node-token 5 token: abcdef.0123456789abcdef 6 ttl: 24h0m0s 7 usages: 8 - signing 9 - authentication 10kind: InitConfiguration 11localAPIEndpoint: 12 #apiserver address 13 advertiseAddress: 192.168.1.2 14 bindPort: 6443 15nodeRegistration: 16 # use containerd, docker is deprecated 17 criSocket: unix:///var/run/containerd/containerd.sock 18 imagePullPolicy: IfNotPresent 19 # node must visis 20 name: node 21 taints: null 22--- 23apiServer: 24 timeoutForControlPlane: 4m0s 25apiVersion: kubeadm.k8s.io/v1beta3 26certificatesDir: /etc/kubernetes/pki 27clusterName: kubernetes 28controllerManager: {} 29imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers 30dns: {} 31etcd: 32 external: 33 # external etcd, you may use etcd provide by kubeadm 34 endpoints: 35 - https://192.168.1.2:2379 36 caFile: /etc/etcd/pki/ca.crt 37 certFile: /etc/etcd/pki/apiserver-etcd-client.crt 38 keyFile: /etc/etcd/pki/apiserver-etcd-client.key 39 40kind: ClusterConfiguration 41# latest version 42kubernetesVersion: 1.24.1 43networking: 44 dnsDomain: cluster.local 45 # here we use flannel cni plugin, you may change you use others such as calico 46 podSubnet: 10.244.0.0/16 47 serviceSubnet: 10.96.0.0/12 48scheduler: {} you can use kubeadm config print init-defaults print the latest version\nchange kernel param 1cat \u0026lt;\u0026lt;EOF | sudo tee /etc/modules-load.d/k8s.conf 2br_netfilter 3overlay 4EOF 5 6cat \u0026lt;\u0026lt;EOF | sudo tee /etc/sysctl.d/k8s.conf 7net.bridge.bridge-nf-call-ip6tables = 1 8net.bridge.bridge-nf-call-iptables = 1 9net.ipv4.ip_forward=1 10EOF maybe need load immediately\n1modprobe br_netfilter overlay 1#pull image first 2kubeadm config images pull --config kubeadm-init-config.yaml 3#init 4kubeadm init --config kubeadm-init-config.yaml 5#allow single node cluster run pod 6kubectl taint nodes --all node-role.kubernetes.io/control-plane- node-role.kubernetes.io/master- 1mkdir $HOME/.kube \u0026amp;\u0026amp; sudo cp /etc/kubenertes/admin.conf $HOME/.kube/config 2kubectl get node you will see k8s pod runing\n","link":"https://blog.rogerogers.com/posts/ops/create-kubernetes-use-kubeadm/","section":"posts","tags":["linux","k8s","kubernetes"],"title":"Create kubernetes use kubeadm"},{"body":"","link":"https://blog.rogerogers.com/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://blog.rogerogers.com/categories/dev/","section":"categories","tags":null,"title":"dev"},{"body":"","link":"https://blog.rogerogers.com/tags/docker/","section":"tags","tags":null,"title":"docker"},{"body":"","link":"https://blog.rogerogers.com/categories/k8s/","section":"categories","tags":null,"title":"k8s"},{"body":"","link":"https://blog.rogerogers.com/categories/ops/","section":"categories","tags":null,"title":"ops"},{"body":"Install apt install podman\nconfig On linux platform, podman put it's config in /etc/containers\nwe need config registries.yaml first\nfill the unqualified-search-registries config so you can searching or pulling by short names\nuse a local register to speed your pulling image insecure=true allow you skipping TLS verification\n1[[registry]] 2location=\u0026#34;localhost:5000\u0026#34; 3insecure=true you can blocking a registry, namespace, or image by set blocked=true\nconfig a mirror 1[[registry]] 2location=\u0026#34;registry.access.redhat.com\u0026#34; 3[[registry.mirror]] 4location=\u0026#34;internal.registry.mirror\u0026#34; Run podman has many of docker command, simplest you can just alias your docker command to podman\nalways run on when system reboot\nuse systemd\npodman provide simple command to generate a systemd config\npodman generate systemd --new --name redis \u0026gt; /etc/systemd/system/redis.service\nsystemctl enable --now redis\nthis will keep redis on when system reboot\n","link":"https://blog.rogerogers.com/posts/ops/using-podman-instead-docker/","section":"posts","tags":["docker","ops"],"title":"Using podman instead docker"},{"body":"","link":"https://blog.rogerogers.com/tags/golang/","section":"tags","tags":null,"title":"golang"},{"body":"","link":"https://blog.rogerogers.com/categories/golang/","section":"categories","tags":null,"title":"golang"},{"body":"","link":"https://blog.rogerogers.com/tags/grpc/","section":"tags","tags":null,"title":"grpc"},{"body":"","link":"https://blog.rogerogers.com/categories/grpc/","section":"categories","tags":null,"title":"grpc"},{"body":"1.Install protoc use apt\nsudo apt install protoc\nor download release from github direct, here i use ubuntu, for other platform, visit protocol\nwget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip -o ${HOME}/.local/bin\n2.install protoc-gen-go go install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n3.write example code 1syntax = \u0026#34;proto3\u0026#34;; 2 3option go_package = \u0026#34;proto/ecommerce\u0026#34;; 4package ecommerce; 5 6message ProductID { string value = 1; } 7 8message Product { 9 string id = 1; 10 string name = 2; 11 string description = 3; 12} 13 14service ProductInfo { 15 rpc addProduct(Product) returns (ProductID); 16 rpc getProduct(ProductID) returns (Product); 17} and put this in a proto folder\n4.Gen proto for golang and grpc 1protoc --go_out=. --go_opt=paths=source_relative \\ 2 --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/product_info.proto Explains of this options go_out define where to put your code go_opt define go_out options paths=import mean create the full import path of option go_package in your proto file, and paths=source_relative will ignore this module in go_opt will sub the prefix of you go_package option Now you can use it in you project\nJust a record, i'm still learning\n","link":"https://blog.rogerogers.com/posts/dev/protocol-buffers-with-golang/","section":"posts","tags":["golang","grpc"],"title":"Protocol-buffers with golang"},{"body":"Here are some ideas to get you started:\n🔭 I’m currently working on Golang, Python 🌱 I’m currently learning Rust 🤔 I’m looking for help with Rust 💬 Ask me about Golang, Python, Linux, DevOps, Kubernetes, Rust 😄 Pronouns: rogerogers ","link":"https://blog.rogerogers.com/about/","section":"","tags":null,"title":"About"},{"body":"","link":"https://blog.rogerogers.com/posts/","section":"posts","tags":["golang","rust","k8s","grpc"],"title":"Posts"},{"body":"","link":"https://blog.rogerogers.com/tags/rust/","section":"tags","tags":null,"title":"rust"},{"body":"","link":"https://blog.rogerogers.com/categories/rust/","section":"categories","tags":null,"title":"rust"},{"body":"I'm begin learning rust.\n","link":"https://blog.rogerogers.com/posts/dev/learn-rust/","section":"posts","tags":["rust"],"title":"Begin learn rust"},{"body":"I'm begin learning golang.\n","link":"https://blog.rogerogers.com/posts/dev/learn-golang/","section":"posts","tags":["golang"],"title":"Begin learning golang"},{"body":"","link":"https://blog.rogerogers.com/archives/","section":"","tags":null,"title":""},{"body":"Tradução em português. Apenas para demonstração, o resto do artigo não está traduzido.\nWritten in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","link":"https://blog.rogerogers.com/about.pt/","section":"","tags":null,"title":"Sobre"},{"body":"","link":"https://blog.rogerogers.com/series/","section":"series","tags":null,"title":"Series"}]