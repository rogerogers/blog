<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rogers</title><link>https://blog.rogerogers.com/</link><description>Recent content on Rogers</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2017–2022, Rogers; all rights reserved.</copyright><lastBuildDate>Tue, 28 Jun 2022 12:56:57 +0800</lastBuildDate><atom:link href="https://blog.rogerogers.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Kratos use nacos as config center</title><link>https://blog.rogerogers.com/posts/dev/kratos-use-nacos-as-config-center/</link><pubDate>Tue, 28 Jun 2022 12:56:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/dev/kratos-use-nacos-as-config-center/</guid><description>
kratos is your ultimate Go microservices framework for the cloud-native era. nacos is an easy-to-use dynamic service discovery, configuration and service management platform for building cloud native applications.</description></item><item><title>Vim tourist</title><link>https://blog.rogerogers.com/posts/dev/vim-tourist/</link><pubDate>Fri, 24 Jun 2022 10:56:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/dev/vim-tourist/</guid><description>
coding with vim, vim is so powerful</description></item><item><title>Ansible beginner</title><link>https://blog.rogerogers.com/posts/ops/use-ansible-manager-large-number-of-computer/</link><pubDate>Mon, 20 Jun 2022 00:06:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/ops/use-ansible-manager-large-number-of-computer/</guid><description>
Ansible make it easier to manage large number of computer</description></item><item><title>Build monitoring system base on prometheus and grafana</title><link>https://blog.rogerogers.com/posts/ops/build-monitoring-system-base-on-prometheus-and-grafana/</link><pubDate>Mon, 20 Jun 2022 00:06:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/ops/build-monitoring-system-base-on-prometheus-and-grafana/</guid><description>
quickly build your monitor system based on prometheus and grafana</description></item><item><title>Build your gui use pyqt5</title><link>https://blog.rogerogers.com/posts/dev/build-your-gui-use-pyqt5/</link><pubDate>Sun, 19 Jun 2022 10:56:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/dev/build-your-gui-use-pyqt5/</guid><description>
Build your first cross platform gui application use pyqt5</description></item><item><title>Crictl usage</title><link>https://blog.rogerogers.com/posts/ops/crictl-usage/</link><pubDate>Sat, 18 Jun 2022 00:06:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/ops/crictl-usage/</guid><description>
crictl usage, simple config and run you first pod and container</description></item><item><title>Run Docker on mac use multipass</title><link>https://blog.rogerogers.com/posts/dev/run-docker-on-mac-use-multipass/</link><pubDate>Fri, 17 Jun 2022 12:56:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/dev/run-docker-on-mac-use-multipass/</guid><description>
run you container on mac, use linux vm by multipass</description></item><item><title>Create kubernetes use kubeadm</title><link>https://blog.rogerogers.com/posts/ops/create-kubernetes-use-kubeadm/</link><pubDate>Tue, 14 Jun 2022 00:06:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/ops/create-kubernetes-use-kubeadm/</guid><description>
create a kubernetes use kubeadm, containerd as runtime</description></item><item><title>Using podman instead docker</title><link>https://blog.rogerogers.com/posts/ops/using-podman-instead-docker/</link><pubDate>Sat, 02 Apr 2022 23:00:00 +0800</pubDate><guid>https://blog.rogerogers.com/posts/ops/using-podman-instead-docker/</guid><description>
Install apt install podman
config On linux platform, podman put it's config in /etc/containers
we need config registries.yaml first
fill the unqualified-search-registries config so you can searching or pulling by short names
use a local register to speed your pulling image insecure=true allow you skipping TLS verification
1[[registry]] 2location=&amp;#34;localhost:5000&amp;#34; 3insecure=true you can blocking a registry, namespace, or image by set blocked=true
config a mirror 1[[registry]] 2location=&amp;#34;registry.access.redhat.com&amp;#34; 3[[registry.mirror]] 4location=&amp;#34;internal.registry.mirror&amp;#34; Run podman has many of docker command, simplest you can just alias your docker command to podman</description></item><item><title>Protocol-buffers with golang</title><link>https://blog.rogerogers.com/posts/dev/protocol-buffers-with-golang/</link><pubDate>Sat, 05 Mar 2022 09:59:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/dev/protocol-buffers-with-golang/</guid><description>
1.Install protoc use apt
sudo apt install protoc
or download release from github direct, here i use ubuntu, for other platform, visit protocol
wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip -o ${HOME}/.local/bin
2.install protoc-gen-go go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
3.write example code 1syntax = &amp;#34;proto3&amp;#34;; 2 3option go_package = &amp;#34;proto/ecommerce&amp;#34;; 4package ecommerce; 5 6message ProductID { string value = 1; } 7 8message Product { 9 string id = 1; 10 string name = 2; 11 string description = 3; 12} 13 14service ProductInfo { 15 rpc addProduct(Product) returns (ProductID); 16 rpc getProduct(ProductID) returns (Product); 17} and put this in a proto folder</description></item><item><title>Begin learn rust</title><link>https://blog.rogerogers.com/posts/dev/learn-rust/</link><pubDate>Sun, 27 Feb 2022 00:06:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/dev/learn-rust/</guid><description>
I'm begin learning rust.</description></item><item><title>Begin learning golang</title><link>https://blog.rogerogers.com/posts/dev/learn-golang/</link><pubDate>Sun, 27 Feb 2022 00:06:57 +0800</pubDate><guid>https://blog.rogerogers.com/posts/dev/learn-golang/</guid><description>
I'm begin learning golang.</description></item></channel></rss>